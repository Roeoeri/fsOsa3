{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","newObject","post","id","put","delete","PassMessage","_ref","message","react_default","a","createElement","className","ErrorMessage","_ref2","Person","props","person","name","number","App_PoistoNappi","poista","AllPerson","allPersons","filter","toLowerCase","includes","newFilter","map","App_Person","key","PoistoNappi","onClick","FilterLomake","value","onChange","handler","NimiNumeroLomake","onSubmit","submit","nimiEka","value1","onChangeName","nimiToka","value2","onChangeNumber","type","buttonType","buttonName","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","setNewFilter","_useState9","_useState10","passMessage","setPassMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","personService","then","response","data","personUpdate","find","p","updatedPerson","objectSpread","getPersonName","setTimeout","catch","error","i","length","App_PassMessage","App_ErrorMessage","App_FilterLomake","event","target","App_NimiNumeroLomake","preventDefault","nameNumberObject","window","confirm","concat","App_AllPerson","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.649fa7e9.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons/'\n\n\nconst getAll = () =>{\n\n    return axios.get(baseUrl)\n\n}\n\nconst add = newObject =>{\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) =>{\n    return axios.put(baseUrl + id, newObject)\n    \n}\n\nconst deletePerson = (id) =>{\n      return axios.delete(baseUrl + id)\n}\n\n\nexport default {\n    getAll: getAll,\n    add: add,\n    update: update,\n    deletePerson: deletePerson\n}\n\n","\nimport './App.css';\nimport React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\n\n\n\nconst PassMessage = ({message}) =>{\n  if(message === null){\n    return null\n  }\n  return(\n    <div className=\"pass\">\n    {message}\n    </div>\n  )\n\n}\n\nconst ErrorMessage = ({message}) =>{\n  if(message === null){\n    return null\n  }\n  return(\n    <div className=\"error\">\n    {message}\n    </div>\n  )\n  \n}\n\n\nconst Person = (props)=>{\n  return(\n   <div>\n     {props.person.name} {props.person.number}\n     <PoistoNappi poista = {props.poista}/>\n   </div>\n  )\n\n}\n\nconst AllPerson = (props)=>{\n\n  const personsToshow = props.allPersons.filter(person=>\n    person.name.toLowerCase().includes(props.newFilter.toLowerCase()))\n\n  return(\n    personsToshow.map(person =>\n    <Person poista={()=> {props.poista(person.id)}} key={person.id} person = {person}/>)\n    \n  )\n}\n\nconst PoistoNappi = (props) =>{\n  return(\n  <button onClick={props.poista}> Poista </button>\n  )\n\n}\n\nconst FilterLomake = (props) =>{\n\n  return(\n  <input \n    value={props.value}\n    onChange={props.handler}\n  />\n  )\n  }\n\nconst NimiNumeroLomake = (props) =>{\n\n  return(\n    <form\n    onSubmit = {props.submit}>\n    <div>\n      {props.nimiEka}<input\n      value={props.value1}\n      onChange = {props.onChangeName}\n      />\n    </div>\n    <div> {props.nimiToka}<input \n    value= {props.value2}\n    onChange= {props.onChangeNumber}\n    />\n    </div>\n    <button type = {props.buttonType}>{props.buttonName}</button>\n    </form>\n  )\n\n}\n\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([\n    \n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] =useState(\"\")\n  const [ newFilter, setNewFilter] =useState(\"\")\n  const [ passMessage, setPassMessage] = useState(null)\n  const [ errorMessage, setErrorMessage] = useState(null)\n\n\n  useEffect(()=> {\n    personService\n    .getAll()\n    .then(response => {\n      setPersons(response.data)\n    })\n  },[])\n  \n  const handleNameChange = (event) =>{\n    setNewName(event.target.value)\n\n  }\n\n  const handleNumberChange = (event) =>{\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) =>{\n    \n    setNewFilter(event.target.value)\n  }\n\n\n  const addNimiNumero = (event) =>{\n    event.preventDefault()\n\n    const nameNumberObject  ={\n    name: newName,\n    number: newNumber,\n    \n    }\n    for(var i=0; i<persons.length;i++){\n      if(persons[i].name===newName){\n        if(\n        window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella ?`)){\n\n          const id = persons[i].id\n          const number = nameNumberObject.number\n          personUpdate(id,number)\n        \n        }\n        setNewName(\"\")\n        setNewNumber(\"\")\n        return\n      }\n    }\n\n    personService\n    .add(nameNumberObject)\n    .then(response=>{\n      setPersons(persons.concat(response.data))\n      setNewName(\"\")\n      setNewNumber(\"\")\n      setPassMessage(\n        \"Henkilö \" + nameNumberObject.name + \" lisättiin\"\n      )\n      setTimeout(()=>{\n        setPassMessage(null)\n      },5000)\n    \n\n\n    })\n\n    \n  }\n\n  const personUpdate = (id, number) =>{\n    const person = persons.find(p => p.id === id)\n    const updatedPerson = {...person, number: number}\n\n    personService\n    .update(id, updatedPerson)\n    .then(response =>{\n      setPersons(persons.map(person => person.id !== id ? person: response.data))\n      setPassMessage(\n        \"Henkilön \" + getPersonName(id) + \" tietoja muutettin\"\n      )\n      setTimeout(()=>{\n        setPassMessage(null)\n      },5000)\n    })\n    .catch(error =>{\n      setErrorMessage(\n        \"Henkilö \" + getPersonName(id) + \" on jo poistettu\"\n      )\n      setPersons(persons.filter(person=> person.id !== id))\n      setTimeout(()=>{\n        setErrorMessage(null)\n      },5000)\n\n    })\n\n  }\n\n  \n  const personDelete = (id) =>{\n\n    if(window.confirm(\"Poistetaanko \" + getPersonName(id) + \" ?\")){\n    personService\n    .deletePerson(id)\n    .then(response =>{\n      setPersons(persons.filter(person=> person.id !== id))\n      setPassMessage(\n        \"Henkilö \" + getPersonName(id) + \" poistettiin\"\n      )\n      setTimeout(()=>{\n        setPassMessage(null)\n      },5000)\n    }).catch(error =>{\n      setErrorMessage(\n        \"Henkilö \" + getPersonName(id) + \" on jo poistettu\"\n      )\n      setPersons(persons.filter(person=> person.id !== id))\n      setTimeout(()=>{\n        setErrorMessage(null)\n      },5000)\n    })\n    \n    }\n  }\n\n  const getPersonName = (id) =>{\n    let person\n    for(let i=0; i<persons.length;i++){\n        if(persons[i].id === id){\n           person=persons[i].name\n        }\n    }\n    return(\n      person\n    )\n  }\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <PassMessage message = {passMessage} />\n      <ErrorMessage message = {errorMessage} />\n     Hae nimistä: \n     <FilterLomake value= {newFilter} handler={handleFilterChange}/>\n      <h2>Lisää uusi</h2>\n     <NimiNumeroLomake submit = {addNimiNumero} nimiEka= \"Nimi: \"\n     value1={newName} onChangeName={handleNameChange} nimiToka =\"Numero: \"\n     value2= {newNumber} onChangeNumber={handleNumberChange} buttonType=\"submit\"\n     buttonName = \"lisää\" /> \n      <h2>Numerot</h2>\n      <AllPerson poista={personDelete} allPersons={persons} newFilter={newFilter}/>\n    </div>\n\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}